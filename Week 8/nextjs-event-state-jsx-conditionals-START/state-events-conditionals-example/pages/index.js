import { useState } from 'react'

import { MOVIE_LIST } from '../utils/movies'

import SimpleListItem from '../components/SimpleListItem'

import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

import Alert from '@mui/material/Alert';
import Button from '@mui/material/Button';
import Container from '@mui/material/Container';
import Grid from '@mui/material/Grid';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';

import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';

export default function Home() {
  const [search, setSearch] = useState("")
  const [year, setYear] = useState("")
  const [errorMessage, setErrorMessage] = useState("")
  const [movieList, setMovieList] = useState(MOVIE_LIST)


  const handleSubmit = (event) => {
    event.preventDefault()

    //validate the search
    validateSearchValues()

    //filter the movies
    if (errorMessage === "") {
      filterMovies()
    }

  }

  const filterMovies = () => {
    // make a copy of the movie list
    let filteredMovieList = [...MOVIE_LIST]
    // check if the search is empty
    if (search.trim() !== "") {
        // we are going to use our knowledge of filter on arrays to filter out the movies we don't want
        filteredMovieList = filteredMovieList.filter((movie) => {
          let searchLowerCase = search.toLowerCase()
          let movieNameLowerCase = movie.name.toLowerCase()
          // return true to keep the movie in the array
          // return false to not keep the movie in the array
          return movieNameLowerCase.includes(searchLowerCase)
        })
    }
    //do the same thing for year
    // set the state
    if (year.trim() !== "") {
      filteredMovieList = filteredMovieList.filter((movie) => {
        //check if the year (as an int) is the same as movie.year
        return movie.year === parseInt(year)
      })
    }

    setMovieList(filteredMovieList)
  }

  const isNumber = (value) => {
    return !isNaN(value)
  }
  const validateSearchValues = () => {
    //if they're both empty, it's valid.
    if (search.trim().length === 0 && year.trim().length === 0){
      setErrorMessage("")
      return
    }

    if (year.trim().length === 0) {
      setErrorMessage("")
      return
    }

    if (!isNumber(year) || year.trim().length !== 4){
      setErrorMessage(`${year} is not a valid year`)
      return
    }

    setErrorMessage("")
   
  }

  return (
    <div>
      <Head>
        <title>Our Movie App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
      </Head>

      <main>
        <Container>
          <Typography variant="h2" component="h2" style={{textAlign: "center"}}>
            Movies
          </Typography>
          <form 
            style={{width: '100%'}}
            onSubmit={handleSubmit}
            >
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <TextField
                  id="search-field"
                  label="search..."
                  variant="standard"
                  sx={{width: '100%'}}
                  onChange = {(event) => {
                    setSearch(event.target.value)}}
                  value={search}
                />
              </Grid>
              <Grid item xs={4}>
                <TextField
                  id="year-field"
                  label="year"
                  variant="standard"
                  sx={{width: '100%'}}
                  onChange = {(event) => {
                    setYear(event.target.value)}}
                  value={year}
                />
              </Grid>
              <Grid item xs={2}>
                <Button
                  type="submit"
                  variant="contained"
                >Filter</Button>
              </Grid>
              <Grid item xs={10}>
                {/* Add the error message here*/}
                {errorMessage !== "" && 
                  <Alert severity="error">{errorMessage}</Alert>
                }
              </Grid>
            </Grid>
          </form>
          {movieList.length === 0 ?
          <SimpleListItem text={"no results found"} />
          :
          <SimpleListItem text={`Found ${movieList.length} result(s)`} />
          }
          <List sx={{width: `100%`}}>
          { movieList.map((movieData, index)=> {
              return <ListItem key={index}>
                <ListItemText>
                  <Typography variant="p" component="div">
                    {movieData.name} ({movieData.year})
                  </Typography>
                </ListItemText>
              </ListItem>
            })
          }
          </List>
          
        </Container>
      </main>
    </div>
  )
}
